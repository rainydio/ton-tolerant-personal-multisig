int uint_bitsize(int x) asm "UBITSIZE";

int uint_bitcount(int x) {
	var count = 0;
	while (x != 0) {
		count += x & 1;
		x = x >> 1;
	}
	return count;
}

(int, slice) authenticate_message(cell keys, slice msg) {
	var (public_key, signature, payload_slice) = (
		msg~load_uint(256),
		msg~load_bits(512),
		msg~load_ref().begin_parse()
	); msg.end_parse();

	var (public_key_index_slice, public_key_found) =
		keys.udict_get?(256, public_key);

	var signed_body = begin_cell()
		.store_slice(my_address())
		.store_slice(payload_slice)
		.end_cell();

	throw_unless(35, public_key_found);
	throw_unless(35, check_signature(cell_hash(signed_body), signature, public_key));

	return (public_key_index_slice.preload_uint(8), payload_slice);
}

(cell, (slice, int)) ~orders_delete_get_order_slice(cell orders, int seqno) {
	var (order_slice, order_found) = orders~udict_delete_get?(32, seqno);
	return (orders, (order_slice, order_found));
}

(cell, ()) ~orders_set_order_builder(cell orders, int seqno, builder b) {
	orders~udict_set_builder(32, seqno, b);
	return (orders, ());
}

(int) execute_order?(int out_mode, cell out_ref, int confirm_mask, int cancel_mask, int keys_required) {
	if (uint_bitcount(cancel_mask) >= keys_required) {
		return true;
	}
	if (uint_bitcount(confirm_mask) >= keys_required) {
		send_raw_message(out_ref, out_mode);
		return true;
	}
	return false;
}

(slice, (int, cell, int, int)) ~load_order(slice s) {
	var (out_mode, out_ref, confirm_mask, cancel_mask) = (
		s~load_uint(8),
		s~load_ref(),
		s~load_uint(slice_bits(s) / 2),
		s~load_uint(slice_bits(s))
	);
	return (s, (out_mode, out_ref, confirm_mask, cancel_mask));
}

(builder) store_order(builder b, int out_mode, cell out_ref, int confirm_mask, int cancel_mask) {
	var mask_size = max(
		uint_bitsize(confirm_mask),
		uint_bitsize(cancel_mask)
	);

	return b
		.store_uint(out_mode, 8)
		.store_ref(out_ref)
		.store_uint(confirm_mask, mask_size)
		.store_uint(cancel_mask, mask_size);
}

() recv_internal(slice in_msg) impure {

}

() recv_external(slice in_msg) impure {
	var data_slice = get_data().begin_parse();
	var (current_seqno, keys, keys_required, orders, seqno_tolerance) = (
		data_slice~load_uint(32),
		data_slice~load_dict(),
		data_slice~load_uint(8),
		data_slice~load_dict(),
		data_slice~load_uint(16)
	); data_slice.end_parse();

	var (public_key_index, payload_slice) = authenticate_message(keys, in_msg);
	var public_key_mask = 1 << public_key_index;

	var (valid_until, order_seqno, order_out_mode, order_out_ref, op) = (
		payload_slice~load_uint(32),
		payload_slice~load_uint(32),
		payload_slice~load_uint(8),
		payload_slice~load_ref(),
		payload_slice~load_uint(8)
	); payload_slice.end_parse();

	var order_confirm_mask = op == 1 ? public_key_mask : 0;
	var order_cancel_mask = op == 2 ? public_key_mask : 0;

	throw_unless(35, valid_until > now());
	throw_unless(33, order_seqno >= current_seqno);
	throw_unless(33, order_seqno <= current_seqno + seqno_tolerance);
	throw_unless(37, (op == 1) | (op == 2));

	var (stored_order_slice, stored_order_found) =
		orders~orders_delete_get_order_slice(order_seqno);

	if (stored_order_found) {
		var (
			stored_order_out_mode,
			stored_order_out_ref,
			stored_order_confirm_mask,
			stored_order_cancel_mask
		) = stored_order_slice~load_order(); stored_order_slice.end_parse();

		throw_if(36, order_out_mode != stored_order_out_mode);
		throw_if(36, cell_hash(stored_order_out_ref) != cell_hash(order_out_ref));
		throw_if(36, stored_order_confirm_mask & order_confirm_mask);
		throw_if(36, stored_order_cancel_mask & order_cancel_mask);

		order_confirm_mask |= stored_order_confirm_mask;
		order_cancel_mask |= stored_order_cancel_mask;
	}

	accept_message();

	var order_executed = false;
	if (order_seqno == current_seqno) {
		order_executed = execute_order?(
			order_out_mode,
			order_out_ref,
			order_confirm_mask,
			order_cancel_mask,
			keys_required
		);
	}

	ifnot (order_executed) {
		orders~orders_set_order_builder(order_seqno, begin_cell().store_order(
			order_out_mode,
			order_out_ref,
			order_confirm_mask,
			order_cancel_mask
		));
	}

	set_data(begin_cell()
		.store_uint(current_seqno, 32)
		.store_dict(keys)
		.store_uint(keys_required, 8)
		.store_dict(orders)
		.store_uint(seqno_tolerance, 16)
		.end_cell()
	);
}

;; Get methods

int seqno() method_id {
	return get_data().begin_parse().preload_uint(32);
}
