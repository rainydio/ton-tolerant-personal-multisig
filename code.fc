int uint_bitsize(int x) asm "UBITSIZE";

int uint_bitcount(int x) {
	var count = 0;
	while (x != 0) {
		count += x & 1;
		x = x >> 1;
	}
	return count;
}

() recv_internal(slice in_msg) impure {

}

() recv_external(slice in_msg) impure {
	var data_slice = get_data().begin_parse();
	var (keys, k, tolerance, current_seqno, orders, reset_cfrm) = (
		data_slice~load_dict(),
		data_slice~load_uint(8),
		data_slice~load_uint(16),
		data_slice~load_uint(32),
		data_slice~load_dict(),
		data_slice~load_uint(slice_bits(data_slice))
	); data_slice.end_parse();

	var auth_slice = in_msg~load_ref().begin_parse();
	var (public_key, signature) = (
		auth_slice~load_uint(256),
		auth_slice~load_bits(512)
	); auth_slice.end_parse();

	var (slot_slice, public_key_found) = keys.udict_get?(256, public_key);

	var signed_body = begin_cell()
		.store_slice(my_address())
		.store_slice(in_msg)
		.end_cell();

	throw_unless(35, public_key_found);
	throw_unless(36, check_signature(cell_hash(signed_body), signature, public_key));

	var public_key_mask = 1 << slot_slice.preload_uint(8);
	var (valid_until, seqno) = (in_msg~load_uint(32), in_msg~load_uint(32));
	var out_slice = in_msg;

	throw_unless(33, valid_until > now());

	if (slice_empty?(out_slice)) {
		throw_unless(34, seqno == current_seqno);
		throw_if(37, reset_cfrm & public_key_mask);

		accept_message();

		reset_cfrm |= public_key_mask;
		if (uint_bitcount(reset_cfrm) >= k) {
			current_seqno += tolerance + 1;
			orders = new_dict();
			reset_cfrm = 0;
		}
	}
	else {
		throw_unless(34, seqno >= current_seqno);
		throw_unless(34, seqno <= current_seqno + tolerance);

		var order_seqno = seqno;
		var order_cfrm = public_key_mask;
		var order_out_mode = out_slice~load_uint(8);
		var order_out_msg = out_slice~load_ref();
		out_slice.end_parse();

		var (stored_order_slice, stored_order_found) =
			orders~udict_delete_get?(32, seqno);

		if (stored_order_found) {
			var (stored_out_mode, stored_out_msg, stored_cfrm) = (
				stored_order_slice~load_uint(8),
				stored_order_slice~load_ref(),
				stored_order_slice~load_uint(slice_bits(stored_order_slice))
			); stored_order_slice.end_parse();

			throw_if(38, stored_out_mode != order_out_mode);
			throw_if(38, cell_hash(stored_out_msg) != cell_hash(order_out_msg));
			throw_if(37, stored_cfrm & order_cfrm);

			order_cfrm |= stored_cfrm;
		}

		accept_message();

		do {
			var next_order_found = false;
			
			if ((order_seqno == current_seqno) & (uint_bitcount(order_cfrm) >= k)) {
				send_raw_message(order_out_msg, order_out_mode);
				current_seqno = order_seqno = order_seqno + 1;
				(stored_order_slice, next_order_found) = orders~udict_delete_get?(32, order_seqno);
				
				if (next_order_found) {
					(order_out_mode, order_out_msg, order_cfrm) = (
						stored_order_slice~load_uint(8),
						stored_order_slice~load_ref(),
						stored_order_slice~load_uint(slice_bits(stored_order_slice))
					); stored_order_slice.end_parse();
				}
			}
			else {
				orders~udict_set_builder(32, order_seqno, begin_cell()
					.store_uint(order_out_mode, 8)
					.store_ref(order_out_msg)
					.store_uint(order_cfrm, uint_bitsize(order_cfrm))
				);
			}
		} until (~ next_order_found);
	}

	set_data(begin_cell()
		.store_dict(keys)
		.store_uint(k, 8)
		.store_uint(tolerance, 16)
		.store_uint(current_seqno, 32)
		.store_dict(orders)
		.store_uint(uint_bitsize(reset_cfrm), reset_cfrm)
		.end_cell()
	);
}

;; Get methods

int seqno() method_id {
	return get_data().begin_parse().preload_uint(32);
}
