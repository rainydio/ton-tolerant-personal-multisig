library ContractUtil

"TonUtil.fif" include

{                                                                                // keys[]
	0 dictnew {                                                                    // keys[], i, keys
		2 pick 2 pick [] 256 B>u@                                                    // keys[], i, keys, key
		2 pick <b swap 8 u, b> <s                                                    // keys[], i, keys, key, i
		3 0 reverse 256 udict! 0= abort"contract-data-keys"                          // keys[], i, keys'
		swap 1 + swap                                                                // keys[], i', keys
	} 3 pick count times
	nip nip
} : contract-data-keys

{                                                                                // seqno_tolerance, keys[]
	<b
		over contract-data-keys dict,  // keys
		swap count 2 / 1 + 8 u,        // k
		swap 16 u,                     // tolerance
		1 32 u,                        // seqno
		dictnew dict,                  // orders
		0 0 u,                         // reset_mask
	b>
} : contract-data

{                                                                                // payload, priv, dst-addr
	<b -rot addr, 2 pick <s s, b> hashu                                            // payload, priv, hash
	over ed25519_sign_uint                                                         // payload, priv, hash
	swap priv>pub                                                                  // payload, signature, key
	<b swap B, swap B, b>                                                          // payload, auth
	<b swap ref, swap <s s, b>                                                     // msg
} : contract-sign

{                                                                                // valid_until, seqno, out_mode, out_ref
	4 0 reverse                                                                    // out_ref, out_mode, seqno, valid_until
	<b swap 32 u, swap 32 u, swap 8 u, swap ref, b>                                // payload
} : contract-order

{                                                                                // valid_until, seqno
	swap                                                                           // seqno, valid_until
	<b swap 32 u, swap 32 u, b>                                                    // payload
} : contract-reset
