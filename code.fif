"Asm.fif" include
// automatically generated from `stdlib.fc` `code.fc` 
PROGRAM{
  DECLPROC uint_bitcount
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  uint_bitcount PROC:<{
    0 PUSHINT
    WHILE:<{
      OVER
      0 NEQINT
    }>DO<{
      OVER
      1 PUSHINT
      AND
      ADD
      SWAP
      1 RSHIFT#
      SWAP
    }>
    NIP
  }>
  recv_internal PROC:<{
    DROP
  }>
  recv_external PROC:<{
    c4 PUSH
    CTOS
    LDDICT
    8 LDU
    16 LDU
    32 LDU
    LDDICT
    DUP
    SBITS
    LDUX
    ENDS
    s0 s6 XCHG
    LDREF
    SWAP
    CTOS
    256 LDU
    9 PUSHPOW2
    LDSLICEX
    ENDS
    s1 s7 PUSH2
    8 PUSHPOW2
    DICTUGET
    NULLSWAPIFNOT
    NEWC
    MYADDR
    STSLICER
    s5 PUSH
    STSLICER
    ENDC
    SWAP
    35 THROWIFNOT
    HASHCU
    s0 s0 s3 XCHG3
    CHKSIGNU
    36 THROWIFNOT
    8 PLDU
    POW2
    SWAP
    32 LDU
    32 LDU
    NOW
    s1 s3 XCHG
    GREATER
    33 THROWIFNOT
    OVER
    SEMPTY
    IF:<{
      NIP
      s3 PUSH
      EQUAL
      34 THROWIFNOT
      s6 s0 PUSH2
      AND
      37 THROWIF
      ACCEPT
      s1 s6 XCHG
      OR
      DUP
      uint_bitcount CALLDICT
      s4 PUSH
      GEQ
      IF:<{
        DROP
        s4 POP
        s3 s3 XCPU
        ADD
        INC
        NEWDICT
        0 PUSHINT
      }>ELSE<{
        s1 s5 s0 XCHG3
      }>
    }>ELSE<{
      s0 s4 PUSH2
      GEQ
      34 THROWIFNOT
      s4 s5 PUSH2
      ADD
      s1 s(-1) PUXC
      LEQ
      34 THROWIFNOT
      s0 s1 PUXC
      8 LDU
      LDREF
      ENDS
      s2 s5 XCHG2
      32 PUSHINT
      DICTUDELGET
      NULLSWAPIFNOT
      IF:<{
        8 LDU
        LDREF
        DUP
        SBITS
        LDUX
        ENDS
        s2 s4 XCPU
        NEQ
        38 THROWIF
        HASHCU
        s6 PUSH
        HASHCU
        NEQ
        38 THROWIF
        s0 s4 PUSH2
        AND
        37 THROWIF
        s1 s4 XCHG
        OR
      }>ELSE<{
        s1 s4 XCHG
        DROP
      }>
      ACCEPT
      UNTIL:<{
        FALSE
        s3 s6 PUSH2
        EQUAL
        s2 PUSH
        uint_bitcount CALLDICT
        s10 PUSH
        GEQ
        AND
        IF:<{
          DROP
          s5 POP
          s8 POP
          s2 s7 PUSH2
          SENDRAWMSG
          0 PUSHINT
          SWAP
          INC
          DUP
          32 PUSHINT
          s1 s4 s4 PUXC2
          DICTUDELGET
          NULLSWAPIFNOT
          DUP
          IF:<{
            s6 POP
            s6 POP
            s9 POP
            s0 s4 XCHG
            8 LDU
            LDREF
            DUP
            SBITS
            LDUX
            ENDS
          }>ELSE<{
            s2 s11 XCHG
            s3 s7 XCHG
            s3 s1 s6 XCHG3
            -ROT
            DROP
          }>
        }>ELSE<{
          s2 PUSH
          NEWC
          8 STU
          s6 s(-1) PUXC
          STREF
          s2 PUSH
          UBITSIZE
          s3 s(-1) s(-1) PUXC2
          STUX
          SWAP
          32 PUSHINT
          s5 s6 s6 PUXC2
          DICTUSETB
          s0 s10 XCHG
          s4 s5 XCHG
          s3 s4 XCHG
          s3 s3 XCHG2
        }>
        s0 s5 XCHG
        NOT
        s3 s10 XCHG
        s1 s5 XCHG
        s3 s4 XCHG
      }>
      s3 s4 XCHG
      4 BLKDROP
      s1 s0 s5 XCHG3
    }>
    DUP
    UBITSIZE
    NEWC
    s1 s6 XCHG
    STDICT
    s1 s4 XCHG
    8 STU
    s1 s5 XCHG
    16 STU
    32 STU
    s1 s3 XCHG
    STDICT
    ROT
    STUX
    ENDC
    c4 POP
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    32 PLDU
  }>
}END>c
